eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgIyBidWlsZF80OgogICMgICBpbWFnZTogbm9kZTo0LjQuMgogICMgICBjb21tYW5kczoKICAjICAgICAtIG5wbSAtLWxvZ2xldmVsIHdhcm4gaW5zdGFsbCAtZyBucG1AMwogICMgICAgIC0gbnBtIC0tbG9nbGV2ZWwgd2FybiBpbnN0YWxsCiAgIyAgICAgLSBucG0gdGVzdAoKICAjIGJ1aWxkXzU6CiAgIyAgIGltYWdlOiBub2RlOjUKICAjICAgY29tbWFuZHM6CiAgIyAgICAgLSBucG0gLS1sb2dsZXZlbCB3YXJuIGluc3RhbGwKICAjICAgICAtIG5wbSB0ZXN0CgogIGJ1aWxkX2JycGFwcDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBicnBhcHAgLgoKICAjIGJ1aWxkX2FjY2VwdGFuY2U6CiAgIyAgIGltYWdlOiBkb2NrZXI6MS4xMQogICMgICBlbnZpcm9ubWVudDoKICAjICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgIyAgIGNvbW1hbmRzOgogICMgICAgIC0gZG9ja2VyIGJ1aWxkIC1mIERvY2tlcmZpbGUtYWNjZXB0YW5jZSAtdCBhY2NlcHRhbmNlIC4KCiAgIyB0ZXN0X2FjY2VwdGFuY2U6CiAgIyAgIGltYWdlOiBkb2NrZXI6MS4xMQogICMgICBlbnZpcm9ubWVudDoKICAjICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgIyAgIGNvbW1hbmRzOgogICMgICAgIC0gZG9ja2VyIHJ1biAtZSBOT0RFX0VOVj1jaSAtZCAtLW5ldCBob3N0IGJycGFwcAogICMgICAgIC0gZG9ja2VyIHJ1biAtLXJtIC0tbmV0IGhvc3QgYWNjZXB0YW5jZQoKICBpbWFnZV90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gbWtkaXIgL3Jvb3QvLmRvY2tlcgogICAgICAtIHNoIC1jICdlY2hvICR7RE9DS0VSX0xPR0lOfSB8IGJhc2U2NCAtZCA-IC9yb290Ly5kb2NrZXIvY29uZmlnLmpzb24nCiAgICAgIC0gZG9ja2VyIHRhZyBicnBhcHAgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2JycGFwcC10ZXN0OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvYnJwYXBwLXRlc3Q6JHtEUk9ORV9DT01NSVRfU0hBfQoKc2VydmljZXM6CiAgcmVkaXM6CiAgICBpbWFnZTogcmVkaXMKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUK.R-1d4lIzfFPRZIWzMkaAwnRpiIBZnxYrvCACUQpyyZw